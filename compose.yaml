# The full docker compose file for the project.
# Use it if you want to run the whole backend in one go, in docker.
# Run it with:
# docker compose -f compose.local.yaml up (-d for detached mode)

# You can also use this compose file for development, just stop the services you want to work on, for example:
# docker compose -f compose.local.yaml stop user-service

# Note: ports shouldn't be exposed in production


services:
  proxy:
    image: caddy:2-alpine
    #    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
    networks:
      - user-net
      - banking-net
      - notification-net
      - proxy-net
      - broker-net
    # Required on linux for host.docker.internal to be accessible
    extra_hosts:
      - "host.docker.internal:host-gateway"
  #  TODO: Change message broker to RabbitMQ
  message-broker:
    image: 'apache/activemq-classic:latest'
    ports:
      - '61616:61616'
      - '61613:61613'
    healthcheck:
      test: [ "CMD-SHELL", "echo 'OK'" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - broker-net
  notification-service:
    image: 'harbor.k8s.elab.rs/banka-1/notification-service:latest'
    ports:
      - '8083:8080'
    networks:
      - broker-net
      - notification-net
    depends_on:
      notification-db:
        condition: service_healthy
      message-broker:
        condition: service_started
    environment:
      - THC_PORT=8080
      - THC_PATH=/actuator/health
      - SERVER_PORT=8080
      - 'SPRING_PROFILES_ACTIVE='
      - SPRING_DATASOURCE_URL=jdbc:postgresql://notification-db:5432/notification_db
      - SPRING_DATASOURCE_USERNAME=notification_user
      - SPRING_DATASOURCE_PASSWORD=notification_password
      - SPRING_DATASOURCE_DRIVER_CLASS_NAME=org.postgresql.Driver
      - SPRING_H2_CONSOLE_ENABLED=false
      #     AMQ_URL and AMQ_QUERYPARAMETERS are joined into SPRING_ACTIVEMQ_BROKER_URL, so I just changed that one.
      - SPRING_ACTIVEMQ_BROKER_URL=tcp://message-broker:61616?jms.prefetchPolicy.all=1&jms.redeliveryPolicy.maximumRedeliveries=0
      #    If you want colored output, uncomment the following line:
      - SPRING_OUTPUT_ANSI_ENABLED=always
    healthcheck:
      test: [ "CMD", "/workspace/health-check" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
  # Note: This isn't necessary
  notification-db:
    image: 'postgres:17-alpine'
    networks:
      - notification-net
    environment:
      POSTGRES_USER: notification_user
      POSTGRES_PASSWORD: notification_password
      POSTGRES_DB: notification_db
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U notification_user -d notification_db" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
  banking-service:
    image: 'harbor.k8s.elab.rs/banka-1/banking-service:latest'
    ports:
      - '8082:8082'
    networks:
      - broker-net
      - banking-net
      - proxy-net
    depends_on:
      banking-db:
        condition: service_healthy
      message-broker:
        condition: service_started
    environment:
      - THC_PORT=8082
      - THC_PATH=/actuator/health
      - 'SPRING_PROFILES_ACTIVE='
      - SPRING_DATASOURCE_URL=jdbc:postgresql://banking-db:5432/banking_db
      - SPRING_DATASOURCE_DRIVER_CLASS_NAME=org.postgresql.Driver
      - SPRING_DATASOURCE_USERNAME=banking_service_user
      - SPRING_DATASOURCE_PASSWORD=banking_service_password
      - SPRING_H2_CONSOLE_ENABLED=false
      - SPRING_ACTIVEMQ_BROKER_URL=tcp://message-broker:61616?jms.prefetchPolicy.all=1&jms.redeliveryPolicy.maximumRedeliveries=0
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB=INFO
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY=INFO
      #    If you want colored output, uncomment the following line:
      - SPRING_OUTPUT_ANSI_ENABLED=always
    healthcheck:
      test: [ "CMD", "/workspace/health-check" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
  banking-db:
    image: 'postgres:17-alpine'
    ports:
      - '5433:5432'
    networks:
      - banking-net
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U banking_service_user -d banking_db" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    environment:
      POSTGRES_USER: banking_service_user
      POSTGRES_PASSWORD: banking_service_password
      POSTGRES_DB: banking_db
  user-service:
    image: 'harbor.k8s.elab.rs/banka-1/user-service:latest'
    ports:
      - '8081:8081'
    networks:
      - broker-net
      - user-net
      - proxy-net
    depends_on:
      user-db:
        condition: service_healthy
      message-broker:
        condition: service_started
    environment:
      - SERVER_PORT=8081
      - THC_PORT=8081
      - THC_PATH=/actuator/health
      - 'SPRING_PROFILES_ACTIVE='
      - SPRING_DATASOURCE_URL=jdbc:postgresql://user-db:5432/user_service_db
      - SPRING_DATASOURCE_DRIVER_CLASS_NAME=org.postgresql.Driver
      - SPRING_DATASOURCE_USERNAME=user_service_user
      - SPRING_DATASOURCE_PASSWORD=user_service_password
      - SPRING_H2_CONSOLE_ENABLED=false
      - SPRING_ACTIVEMQ_BROKER_URL=tcp://message-broker:61616?jms.prefetchPolicy.all=1&jms.redeliveryPolicy.maximumRedeliveries=0
      - FRONTEND_URL=https://localhost
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB=INFO
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY=INFO
      #    If you want colored output, uncomment the following line:
      - SPRING_OUTPUT_ANSI_ENABLED=always
      - FRONTEND_URL=https://localhost
    healthcheck:
      test: [ "CMD", "/workspace/health-check" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
  user-db:
    image: 'postgres:17-alpine'
    ports:
      - '5434:5432'
    networks:
      - user-net
    environment:
      POSTGRES_USER: user_service_user
      POSTGRES_PASSWORD: user_service_password
      POSTGRES_DB: user_service_db
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U user_service_user -d user_service_db" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
  trading-service:
    image: harbor.k8s.elab.rs/banka-1/trading-service:latest
    ports:
      - '3000:3000'
    depends_on:
      trading-db:
        condition: service_healthy
      message-broker:
        condition: service_healthy
    networks:
      - proxy-net
      - trading-net
      - broker-net
    environment:
      - POSTGRES_DSN=postgres://trading_service_user:trading_service_password@trading-db:5432/trading_db?sslmode=disable
      - USER_SERVICE=http://user-service:8081
      - BANKING_SERVICE=http://banking-service:8082
      - MESSAGE_BROKER_NETWORK=tcp
      - MESSAGE_BROKER_HOST=message-broker:61613
    healthcheck:
      test: [ "CMD-SHELL", "echo OK" ]
  trading-db:
    image: 'postgres:17-alpine'
    ports:
      - '5435:5432'
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U trading_service_user -d trading_db" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - trading-net
    environment:
      POSTGRES_USER: trading_service_user
      POSTGRES_PASSWORD: trading_service_password
      POSTGRES_DB: trading_db
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
      LANG: en_US.utf8
      LC_ALL: en_US.utf8
  support-service:
    image: 'harbor.k8s.elab.rs/banka-1/support-service:latest'
    ports:
      - '8000:8000'
    healthcheck:
      test: [ "CMD-SHELL", "curl localhost:8000/health" ]
  redis:
    image: 'redis:latest'
    ports:
      - '6379:6379'
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]

networks:
  broker-net: null
  notification-net: null
  user-net: null
  proxy-net: null
  banking-net: null
  trading-net: null
