# NOTE: When running the application in a Docker container, some properties are overridden by environment variables


spring.application.name=banking-service


#spring.profiles.active=h2
spring.profiles.active=postgres

spring.security.oauth2.resourceserver.jwt.issuer-uri=https://idp.localhost
spring.config.import=optional:file:.env[.properties]

server.port=8082

# Potrebno je u .env fajl koji se nalazi u folderu za user servis ubaciti Base64-enkodovan token
# Za sad se ovo mora uraditi rukom
oauth.jwt.secret=dGVzdDEyMzR0ZXN0MTIzNHRlc3QxMjM0dGVzdDEyMzR0ZXN0MTIzNA==
oauth.jwt.expiration=1800000

#logging.level.org.hibernate.SQL=DEBUG
#logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
#
logging.level.org.springframework.web=debug
logging.level.org.springframework.security=trace

#logging.level.org.springframework.web=debug
#logging.level.org.springframework.security=trace
logging.level.com.banka1.common=warn

springdoc.api-docs.enabled=true
springdoc.swagger-ui.path=/swagger-ui.html

spring.security.user.name=admin
spring.security.user.password=admin123

management.endpoints.web.exposure.include=health,info,metrics,prometheus,web

# ActiveMQ
amq.url=tcp://localhost:61616
amq.queryParameters=?jms.prefetchPolicy.all=1&jms.redeliveryPolicy.maximumRedeliveries=0
spring.activemq.broker-url=${amq.url}${amq.queryParameters}
destination.email=send-email
destination.customer=get-customer
destination.employee.legal=get-employee-legal
destination.account=create-account
destination.customer.email=get-customer-by-email
destination.otc.ack.bank=otc-ack-banking
destination.otc.ack.trade=otc-ack-trading
destination.otc.init=init-otc
destination.otc.premium=otc-pay-premium
destination.account.by-user=get-accounts-by-user
destination.order.init=order-init


spring.sql.init.mode=always

